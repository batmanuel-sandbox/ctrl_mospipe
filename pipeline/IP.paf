#<?cfg paf policy ?>
#
# Pipeline Layer Policy
#

# this part is used by the orchestration layer to determine if
# this pipeline can run on a particular platform or with a particular
# database server
#
requires: {
   database: {
      type:  MySQL
   }

   platform: {
      minCoreCount:  2
   }
}

framework: {
   # the type determines the schema of the "execute" policy below
   type:  standard

   # this is the file that should be sourced to set the environment on
   # the head node where the pipeline is executed.  The file path component
   # can be represented as $ENVVAR which will be replaced with the
   # value of the environment variable with the name ENVVAR.
   # 
   environment: "$CTRL_MOSPIPE_DIR/etc/setup.csh".

   # this is the execution script that we will use to start the
   # pipeline on the head node of the platform.  The file path component
   # can be represented as $ENVVAR which will be replaced with the
   # value of the environment variable with the name ENVVAR.
   # 
   exec:  "$PEX_HARNESS_DIR/bin/launchPipeline.sh"
}

# the contents of this item is passed to the harness to configure the
# pipeline at launch time.
# 
execute: {

   # executionMode: oneloop
   localLogMode: true
   eventBrokerHost: "newfield.as.arizona.edu"
   
   # receiving an event with this topic name will shut down the pipeline
   shutdownTopic: shutdownMosPipe
   
   dir: {

      shortName: "IP"

      # the default root directory all files read or written by pipelines
      # deployed on this platform.  
      # This can be overriden by any of the "named role" directories below.
      #
      defaultRoot:  .

      runDirPattern: "../../%(runid)s/%(shortname)s"


      # These indicate the directory that should be used for a named purpose.
      # If relative paths are given, the resulting directory will be relative
      # to the default run directory (determined by defaultRoot and the 
      # runDirPattern).  These can be given as patterns specified in the same 
      # format as runDirPattern.  (If a directory is given as an absolute path,
      # using a pattern is recommended in order to distinguish between different 
      # production runs.)
      #
      work:     work    # the working directory, where the pipeline is started
      input:    input    # the directory to cache/find input data
      output:   output    # the directory to write output data
      update:   update    # the directory where updatable data is deployed
      scratch:  scratch    # a directory for temporary files that may be deleted 
                     #   upon completion of the pipeline

   }


   ##
   # Stage configuration
   
   # Transform slice id into amp, CCD, and other identifiers
   appStage: {
      stageName: "lsst.ctrl.mospipe.SliceInfoStage.SliceInfoStage"
      eventTopic: "None"
      stagePolicy: @IP/01-sliceInfo_policy.paf
   }
   
   # Link input files into input directory
   appStage: {
      stageName: "lsst.pex.harness.SymLinkStage.SymLinkStage"
      eventTopic: "None"
      stagePolicy: @IP/02-symLink_policy.paf
   }
   
   # Load input image
   appStage: {
      stageName: "lsst.pex.harness.IOStage.InputStage"
      eventTopic: "triggerImageprocEvent0"
      stagePolicy: @IP/03-imageInput_policy.paf
   }
   
#   # Transform input event into visit metadata (exposure 0)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.VisitMetadataStage.VisitMetadataStage"
#      eventTopic: "None"
#      stagePolicy: @IP/04-visitMetadata0_policy.paf
#   }
#   
#   # Transform image metadata into LSST standard (exposure 0)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.MetadataStages.TransformMetadataStage"
#      eventTopic: "None"
#      stagePolicy: @IP/05-transformMetadata0_policy.paf
#   }
#   
#   # Validate that metadata is in LSST standard form (exposure 0)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.MetadataStages.ValidateMetadataStage"
#      eventTopic: "None"
#      stagePolicy: @IP/06-validateMetadata0_policy.paf
#   }
#   
#   # Persist the per-visit metadata (exposure 0)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/07-visitMetadataOutput0_policy.paf
#   }
#
#   # Persist the per-exposure metadata and the raw image (exposure 0)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/08-rawImageAndMetadataOutput0_policy.paf
#   }
#   
#   # Determine which calibration data products to load
#   appStage: {
#      stageName: "lsst.ip.isr.IdentifyCalibrationProductsStage.IdentifyCalibrationProductsStage"
#      eventTopic: "None"
#      stagePolicy: @IP/09-identifyCalibrationProducts_policy.paf
#   }
#   
#   # Load the calibration data products
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.InputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/10-calibrationInput_policy.paf
#   }
#   
#   # Transform calibration exposure metadata into LSST standard (exposure 0)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.MetadataStages.TransformExposureMetadataStage"
#      eventTopic: "None"
#      stagePolicy: @IP/11-transformCalibrationMetadata_policy.paf
#   }
#
#   # Perform ISR (exposure 0)
#   appStage: {
#      stageName: "lsst.ip.isr.IsrStage"
#      eventTopic: "None"
#      stagePolicy: @IP/12-isr0_policy.paf
#   }
#   
#   # Detect sources for WCS (exposure 0)
#   appStage: {
#      stageName: "lsst.meas.pipeline.SourceDetectionStage"
#      eventTopic: "None"
#      stagePolicy: @IP/13-sourceDetection_policy.paf
#   }
#   
#   # Persist calibrated and background-subtracted exposures (exposure 0)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/14-calibAndBkgdExposureOutput_policy.paf
#   }
#
#   # Measure sources for WCS (exposure 0)
#   appStage: {
#      stageName: "lsst.meas.pipeline.SourceMeasurementStage"
#      eventTopic: "None"
#      stagePolicy: @IP/15-sourceMeasurement_policy.paf
#   }
#   
#   # Persist sources (exposure 0)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/16-exposureAndWcsSourcesOutput_policy.paf
#   }
#
#   # Determine PSF (exposure 0)
#   appStage: {
#      stageName: "lsst.meas.pipeline.PsfDeterminationStage"
#      eventTopic: "None"
#      stagePolicy: @IP/17-psfDetermination_policy.paf
#   }
#   
#   # Persist PSF (exposure 0)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/18-psfOutput_policy.paf
#   }
#   
#   # Load input image (exposure 1)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.InputStage"
#      eventTopic: "triggerImageprocEvent1"
#      stagePolicy: @IP/19-imageInput1_policy.paf
#   }
#   
#   # Transform input event into visit metadata (exposure 1)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.VisitMetadataStage.VisitMetadataStage"
#      eventTopic: "None"
#      stagePolicy: @IP/20-visitMetadata1_policy.paf
#   }
#   
#   # Transform image metadata into LSST standard (exposure 1)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.MetadataStages.TransformMetadataStage"
#      eventTopic: "None"
#      stagePolicy: @IP/21-transformMetadata1_policy.paf
#   }
#   
#   # Validate that metadata is in LSST standard form (exposure 1)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.MetadataStages.ValidateMetadataStage"
#      eventTopic: "None"
#      stagePolicy: @IP/22-validateMetadata1_policy.paf
#   }
#   
#   # Persist the per-visit metadata (exposure 1)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/23-visitMetadataOutput1_policy.paf
#   }
#
#   # Persist the per-exposure metadata and the raw image (exposure 1)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/24-rawImageAndMetadataOutput1_policy.paf
#   }
#   
#   # Perform ISR (exposure 1)
#   appStage: {
#      stageName: "lsst.ip.isr.IsrStage"
#      eventTopic: "None"
#      stagePolicy: @IP/25-isr1_policy.paf
#   }
#   
#   # Load WCS sources from entire CCD
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.InputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/26-wcsSourcesInput_policy.paf
#   }
#   
#   # Determine WCS based on CCD's WCS sources
#   appStage: {
#      stageName: "lsst.meas.pipeline.WcsDeterminationStage"
#      eventTopic: "None"
#      stagePolicy: @IP/27-wcsDetermination_policy.paf
#   }
#   
#   # Persist calibrated science exposures
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/28-calibratedExposuresOutput_policy.paf
#   }
#   
#   # Compute CCD-level metadata (no stage policy)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.CcdMetadataStage.CcdMetadataStage"
#      eventTopic: "None"
#   }
#
#   # Load WCS from template image
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.InputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/29-templateMetadataInput_policy.paf
#   }
#   
#   # Load dimensions from template image (hack for DC3a)
#   appStage: {
#      stageName: "lsst.ctrl.mospipe.TemplateDimensionStage.TemplateDimensionStage"
#      eventTopic: "None"
#      stagePolicy: @IP/30-templateDimension_policy.paf
#   }
#
#   # Determine bounding box of exposures within template image
#   appStage: {
#      stageName: "lsst.ip.diffim.pipeline.TemplateBBoxStage.TemplateBBoxStage"
#      eventTopic: "None"
#      stagePolicy: @IP/31-templateBBox_policy.paf
#   }
#   
#   # Load subimage of template corresponding to exposure
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.InputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/32-templateSubimageInput_policy.paf
#   }
#   
#   # Persist template subimage with bounding box and WCS information
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/33-templateSubimageOutput_policy.paf
#   }
#
#   # Subtract template from exposure (exposure 0)
#   appStage: {
#      stageName: "lsst.ip.diffim.diffimStages.DiffimStage"
#      eventTopic: "None"
#      stagePolicy: @IP/34-imageDifference0_policy.paf
#   }
#   
#   # Subtract template from exposure (exposure 1)
#   appStage: {
#      stageName: "lsst.ip.diffim.diffimStages.DiffimStage"
#      eventTopic: "None"
#      stagePolicy: @IP/35-imageDifference1_policy.paf
#   }
#   
#   # Persist difference images and kernels
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/36-differenceImageOutput_policy.paf
#   }
#   
#   # Co-add difference images and detect DIASources
#   appStage: {
#      stageName: "lsst.meas.pipeline.AddAndDetectStage"
#      eventTopic: "None"
#      stagePolicy: @IP/37-addAndDetect_policy.paf
#   }
#   
#   # Measure DIASources in both exposures
#   appStage: {
#      stageName: "lsst.meas.pipeline.SourceMeasurementStage"
#      eventTopic: "None"
#      stagePolicy: @IP/38-diaSourceMeasurement_policy.paf
#   }
#
#   # Convert the Sources to Dia sources
#   appStage: {
#      stageName: "lsst.meas.pipeline.SourceToDiaSourceStage"
#      eventTopic: "None"
#      stagePolicy: @IP/39-sourceToDiaSource_policy.paf
#   }
#
#   # Classify DIASources
#   appStage: {
#      stageName: "lsst.meas.pipeline.SourceClassificationStage"
#      eventTopic: "None"
#      stagePolicy: @IP/40-sourceClassification_policy.paf
#   }
#   
#   # Persist DIASources (exposure 0)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/41-diaSourceOutput0_policy.paf
#   }
#
#   # Persist DIASources (exposure 1)
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/42-diaSourceOutput1_policy.paf
#   }
#   
#   # Send an event to the association pipeline indicating that
#   # new detections are available
#   appStage: {
#      stageName: "lsst.pex.harness.EventStage.EventStage"
#      eventTopic: "None"
#      stagePolicy: @IP/43-associationEvent_policy.paf
#   }
#
#   # Persist SDQA ratings
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/44-sdqaOutput0_policy.paf
#   }
#   appStage: {
#      stageName: "lsst.pex.harness.IOStage.OutputStage"
#      eventTopic: "None"
#      stagePolicy: @IP/45-sdqaOutput1_policy.paf
#   }
#   
}
